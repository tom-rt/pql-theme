<div class="main-wrapper">
  <div class="main-column">
    <div class="cust-main">
      {{ 'cart.css' | asset_url | stylesheet_tag }}
      <div class="hanger"></div>
      {% if cart.empty? %}
        <div class="cart-empty">Votre panier est vide</div>
      {% else %}
        <form action="{{ routes.cart_url }}" class="cart-form" method="post">
          <div class="cart-title" data-money-format="{{ shop.money_format }}">Votre panier</div>
          <div class="cart-items-container">
            {% for item in cart.items %}
              <div class="cart-item-row" data-key="{{ item.key }}">
                <div class="item-left-col">
                  {% if item.image != blank %}
                    <div class="cart-item-data centered">
                      <img
                        src="{{ item.image | image_url: width: 300 }}"
                        class="cart-item__image"
                        alt="{{ item.image.alt | escape }}"
                        loading="lazy"
                        width="110"
                        height="{{ 110 | divided_by: item.image.aspect_ratio | ceil }}"
                      >
                    </div>
                  {% endif %}

                  <div class="item-title-container">
                    <div class="cart-item-data">
                      <div class="cart-item-title">
                        {{ item.title }}
                      </div>
                    </div>

                    <div class="cart-item-data mt-05">
                      <div id="{{item.key}}-price-spinner" class="cart-item-data item-spinner-container">
                        <div class="spinner"></div>
                      </div>
                      <div id="{{ item.key }}-item-price" class="cart-item-data line-price">
                        {{ item.final_line_price | money }}
                      </div>
                    </div>

                    <div class="cart-item-data bg-green mt-1">
                      <button type="button" class="minus cart-quantity-selector button">
                        <img src="{{ 'white-minus.png' | asset_url }}" class="white-minus">
                      </button>
                      <input
                        id="quantity-input"
                        type="text"
                        name="updates[]"
                        value="{{ item.quantity }}"
                        class="qty-input"
                        readonly
                      >
                      <button type="button" class="plus cart-quantity-selector">
                        <img src="{{ 'white-plus.png' | asset_url }}" class="white-plus">
                      </button>
                    </div>
                  </div>
                </div>

                <div class="item-right-col">
                  <div class="cart-item-data">
                    <button class="remove-item">
                      <img src="{{ 'white-trash.png' | asset_url }}" class="white-trash">
                    </button>
                  </div>
                </div>
              </div>
            {% endfor %}
          </div>
          <div class="checkout-container">
            <div class="total-price-container">
              <div class="mr-1">Prix total:</div>
              <div id="total-price" class="mr-1">{{ cart.total_price | money }}</div>
              <div id="total-price-spinner" class="item-spinner-container mr-1">
                <div class="spinner"></div>
              </div>
            </div>

            {% comment %} <input type="submit" name="checkout" value="Checkout"> {% endcomment %}
            <button type="submit" name="checkout" class="checkout-button">Commander</button>
          </div>

          {% comment %} <input type="submit" value="Update cart" id="update-cart-input" hidden> {% endcomment %}
        </form>
      {% endif %}
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
  document.querySelectorAll('.remove-item').forEach((removeItemButton) => {
    removeItemButton.addEventListener('click', (event) => {
      event.preventDefault();
      const item = removeItemButton.closest('.cart-item-row');
      const key = item.getAttribute('data-key');
      axios
        .post('/cart/change.js', {
          id: key,
          quantity: 0,
        })
        .then((res) => {
          if (res.data.items.length == 0) {
            document.querySelector('.cart-form').remove();
            const html = document.createElement('div');
            html.innerHTML = `
<div class="empty-cart" style="font-size:2rem;">
  Votre panier est vide
  </div>
`;
            document.querySelector('.hanger').appendChild(html);
          } else {
            item.remove();
            const totalPrice = formatMoney(res.data.total_price, dataMoneyFormat);
            document.querySelector('#total-price').textContent = totalPrice;
          }
        });
    });
  });
  const updateCartInput = document.getElementById('update-cart-input');
  const dataMoneyFormat = document.querySelector('[data-money-format]').getAttribute('data-money-format');

  document.querySelectorAll('.cart-item-data button').forEach((button) => {
    button.addEventListener('click', () => {
      const input = button.parentElement.querySelector('input');
      const value = parseInt(input.value);
      const isPlus = button.classList.contains('plus');
      const key = button.closest('.cart-item-row').getAttribute('data-key');

      if (isPlus) {
        const newValue = value + 1;
        input.value = newValue;
        changeItemQuantity(key, newValue.toString(), key);
      } else if (value > 1) {
        const newValue = value - 1;
        input.value = newValue;
        changeItemQuantity(key, newValue.toString(), key);
      }
    });
  });

  function changeItemQuantity(key, quantity, key) {
    priceSpinner = document.getElementById(`${key}-price-spinner`);
    itemPrice = document.getElementById(`${key}-item-price`);
    totalPriceSpinner = document.getElementById(`total-price-spinner`);
    totalPrice = document.getElementById(`total-price`);

    priceSpinner.style.display = 'block';
    itemPrice.style.display = 'none';
    totalPriceSpinner.style.display = 'block';
    totalPrice.style.display = 'none';

    console.log('plus', key, quantity);
    axios
      .post('/cart/change.js', {
        id: key,
        quantity: quantity,
      })
      .then((res) => {
        const item = res.data.items.find((item) => item.key == key);
        const itemPrice = formatMoney(item.final_line_price, dataMoneyFormat);
        const totalPrice = formatMoney(res.data.total_price, dataMoneyFormat);
        document.querySelector('#total-price').textContent = totalPrice;
        document.querySelector(`[data-key="${key}"] .line-price`).textContent = itemPrice;

        priceSpinner2 = document.getElementById(`${key}-price-spinner`);
        itemPrice2 = document.getElementById(`${key}-item-price`);
        totalPriceSpinner2 = document.getElementById(`total-price-spinner`);
        totalPrice2 = document.getElementById(`total-price`);

        priceSpinner2.style.display = 'none';
        itemPrice2.style.display = 'block';
        totalPriceSpinner2.style.display = 'none';
        totalPrice2.style.display = 'block';
      });
  }

  function formatMoney(cents, format) {
    if (typeof cents == 'string') {
      cents = cents.replace('.', '');
    }
    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var formatString = format || this.money_format;

    function defaultOption(opt, def) {
      return typeof opt == 'undefined' ? def : opt;
    }

    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = defaultOption(precision, 2);
      thousands = defaultOption(thousands, ',');
      decimal = defaultOption(decimal, '.');

      if (isNaN(number) || number == null) {
        return 0;
      }

      number = (number / 100.0).toFixed(precision);

      var parts = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents = parts[1] ? decimal + parts[1] : '';

      return dollars + cents;
    }

    switch (formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }

    return formatString.replace(placeholderRegex, value);
  }
</script>
